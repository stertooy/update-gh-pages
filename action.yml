name: 'Update GitHub Pages'
description: 'Update the gh-pages branch of a GAP package'
inputs:
  dry-run:
    description: "Set to true to not push the release to GitHub"
    required: false
    default: "false"
  version:
    description: "The version of the package from which to update the website (if empty, use latest)"
    required: false
    default: ""
  clean:
    description: "Use a fresh copy of the GithubPagesForGAP website - this will undo any modifications made"
    required: false
    default: "true"
  repository:
    description: "The repository to update"
    required: false
    default: "${{ github.repository }}"

runs:
  using: "composite"
  steps:

      - name: "Setup git"
        shell: bash
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git fetch
  
      - name: "Create gh-pages worktree"
        shell: bash
        run: |
          if [[ -z $(git ls-remote --heads origin gh-pages) ]]; then
            BRANCH=$(git branch --show-current)
            git switch --orphan gh-pages
            git commit --allow-empty -m "Create gh-pages branch"
            git checkout $BRANCH
          fi
          git worktree add gh-pages gh-pages

      - name: "Setup GitHubPagesForGap"
        shell: bash
        if: ${{ inputs.clean == 'true' }}
        working-directory: gh-pages
        run: |
          # Remove everything
          git rm -r --cached --ignore-unmatch *
          git clean -f *
          # Download GitHubPagesForGap and extract
          wget -qO- https://github.com/gap-system/GitHubPagesForGAP/archive/refs/heads/gh-pages.tar.gz | tar xzf - --strip-components=1
          # Add GitHubPagesForGap to git
          git add .
          git commit -m "Update to newest version of GitHubPagesForGap"

      - name: "Get package-info.json from the release"
        shell: bash
        working-directory: ${{ runner.temp }}
        run: |
          if [[ -z "${{ inputs.version }}" ]]; then
            echo "Downloading package-info.json from latest release"
            wget https://github.com/${{ inputs.repository }}/releases/latest/download/package-info.json
          else
            VERSION=${{ inputs.version }}
            VERSION=${VERSION#v}
            echo "Downloading package-info.json from $VERSION release"
            wget https://github.com/${{ inputs.repository }}/releases/download/v$VERSION/package-info.json
          fi
          ARCHIVE_URL=$(cat package-info.json | jq -r '.ArchiveURL')
          ARCHIVE_FORMAT=$(cat package-info.json | jq -r '.ArchiveFormats' | tr "," " " | awk '{print $1}')
          README_URL=$(cat package-info.json | jq -r '.README_URL')
          echo "ARCHIVE=$ARCHIVE_URL$ARCHIVE_FORMAT" >> "$GITHUB_ENV"
          echo "README=$(basename $README_URL)" >> "$GITHUB_ENV"
          echo "PKGNAME=$(cat package-info.json | jq -r '.PackageName')" >> "$GITHUB_ENV"
          echo "VERSION=$(cat package-info.json | jq -r '.Version')" >> "$GITHUB_ENV"

      - name: "Get package from the release"
        shell: bash
        run: |
          mkdir -p $RUNNER_TEMP/pkg-release
          TMP_DIR=$RUNNER_TEMP/pkg-release
          echo "TMP_DIR=$TMP_DIR" >> "$GITHUB_ENV"
          sudo apt-get install --no-install-recommends libarchive-tools -y
          wget -O - $ARCHIVE | bsdtar xf - --strip-components=1 -C $TMP_DIR

      - name: "Copy files from the release"
        shell: bash
        working-directory: gh-pages
        run: |
          cp -f $TMP_DIR/PackageInfo.g .
          cp -f $TMP_DIR/$README .
          rm -rf doc/ htm/
          # TODO Should we really copy .txt files? This will also copy the txt files used by GAP which are unreadable...
          if [ -f "$TMP_DIR/doc/chap0.html" ] ; then
            mkdir -p doc
            shopt -s nullglob
            cp -f $TMP_DIR/doc/*.{css,html,jpg,js,png,txt} doc/
          fi
          if [ -d "$TMP_DIR/htm" ] ; then
              cp -r "$TMP_DIR/htm" .
          fi
          if [ -d "$TMP_DIR/doc/htm" ] ; then
              mkdir -p doc
              cp -r "$TMP_DIR/doc/htm" doc/
          fi
          
      - name: "Update links in docs"
        shell: bash
        working-directory: gh-pages/doc
        run: |
          # Adjust links to the GAP manuals and to the GAPDoc manuals.
          # Since this action is designed to run on ubuntu-latest, we can use sed -i
          shopt -s globstar
          # TODO: improve these substitutions? E.g. do not replace when href starts with "http"?
          for f in **/*.htm* ; do
            sed -Ei \
              -e 's;href="[^"]*/doc/([^/"]+)/chap;href="https://docs.gap-system.org/doc/\L\1/chap;g' \
              -e 's;href="[^"]*/\.?pkg/([^/"]+)(-[^/"]+)?/doc/chap;href="https://docs.gap-system.org/pkg/\L\1/doc/chap;g' \
              "$f"
          done

      - name: "Run update script"
        shell: bash
        working-directory: gh-pages
        run: |
          GAPROOT=${GAPROOT-$HOME/gap}
          $GAPROOT/gap update.g

      - name: "Update the gh-pages branch"
        shell: bash
        working-directory: gh-pages
        if: ${{ inputs.dry-run == 'false' }}
        run: |
          git add -A
          git commit --allow-empty -m "Update website for $PKGNAME $VERSION"
          git push --set-upstream origin gh-pages

      - name: "Build the website"
        if: ${{ inputs.dry-run == 'true' }}
        uses: actions/jekyll-build-pages@v1
        source: gh-pages
        destination: output

      - name: "Upload the release"
        uses: actions/upload-artifact@v4
        if: ${{ inputs.dry-run == 'true' }}
        with:
          name: "Website_for_${{ env.PKGNAME }}_${{ env.VERSION }}"
          path: output
          if-no-files-found: error
